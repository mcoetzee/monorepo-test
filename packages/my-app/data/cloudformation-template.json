{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "A CloudFormation template for deploying the Airnode Feed on AWS.",
  "Parameters": {
    "airnodeMnemonic": {
      "Type": "String",
      "MinLength": 10,
      "Description": "Mnemonic phrase of your Airnode address."
    },
    "grafanaLokiUser": {
      "Type": "String",
      "MinLength": 2,
      "AllowedPattern": "^[^\\s]+$",
      "ConstraintDescription": "The string must not contain any whitespaces.",
      "Description": "Username for authenticating Loki API (This should be handed to you)."
    },
    "grafanaLokiToken": {
      "Type": "String",
      "MinLength": 10,
      "AllowedPattern": "^[^\\s]+$",
      "ConstraintDescription": "The string must not contain any whitespaces.",
      "Description": "Token for authenticating Loki API (This should be handed to you)."
    },
    "grafanaLokiEndpoint": {
      "Type": "String",
      "MinLength": 10,
      "AllowedPattern": "^[^\\s]+$",
      "ConstraintDescription": "The string must not contain any whitespaces.",
      "Description": "Loki endpoint (This should be handed to you)."
    },
    "apiKey1": {
      "Type": "String",
      "MinLength": 10,
      "Description": "API secret 1."
    },
    "apiKey2": {
      "Type": "String",
      "MinLength": 10,
      "Description": "API secret 2."
    },
    "NodarySignedApiToken": {
      "Type": "String",
      "MinLength": "10",
      "AllowedPattern": "^[^\\s]+$",
      "ConstraintDescription": "The string must not contain any whitespaces.",
      "Description": "Token to POST data to Nodary Signed API (This should be handed to you)."
    },
    "Api3SignedApiToken": {
      "Type": "String",
      "MinLength": "10",
      "AllowedPattern": "^[^\\s]+$",
      "ConstraintDescription": "The string must not contain any whitespaces.",
      "Description": "Token to POST data to API3 Signed API (This should be handed to you)."
    },
    "StagingSignedApiToken": {
      "Type": "String",
      "MinLength": 10,
      "AllowedPattern": "^[^\\s]+$",
      "ConstraintDescription": "The string must not contain any whitespaces.",
      "Description": "Token to POST data to Staging Signed API (This should be handed to you)."
    }
  },
  "Resources": {
    "CloudWatchLogsGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "AirnodeFeedLogGroup-<SOME_ID>",
        "RetentionInDays": 7
      }
    },
    "AppDefinition": {
      "Type": "AWS::ECS::TaskDefinition",
      "Properties": {
        "NetworkMode": "awsvpc",
        "Cpu": 2048,
        "Memory": 4096,
        "ExecutionRoleArn": {
          "Ref": "ECSTaskRole"
        },
        "RequiresCompatibilities": ["FARGATE"],
        "ContainerDefinitions": [
          {
            "Essential": true,
            "Image": "grafana/fluent-bit-plugin-loki:2.9.1-amd64",
            "Name": "AirnodeFeedLogForwarder-<SOME_ID>",
            "FirelensConfiguration": {
              "Type": "fluentbit",
              "Options": {
                "enable-ecs-log-metadata": "true"
              }
            },
            "LogConfiguration": {
              "LogDriver": "awslogs",
              "Options": {
                "awslogs-group": {
                  "Ref": "CloudWatchLogsGroup"
                },
                "awslogs-region": {
                  "Ref": "AWS::Region"
                },
                "awslogs-create-group": "true",
                "awslogs-stream-prefix": "firelens"
              }
            },
            "MemoryReservation": 50
          },
          {
            "Name": "AirnodeFeed",
            "Image": "api3/airnode-feed:0.5.1",
            "Environment": [
              {
                "Name": "SECRETS_ENV",
                "Value": {
                  "Fn::Join": [
                    "",
                    [
                      "WALLET_MNEMONIC",
                      "=",
                      {
                        "Ref": "airnodeMnemonic"
                      },
                      "\\n",
                      "APIKEY1_VALUE",
                      "=",
                      {
                        "Ref": "apiKey1"
                      },
                      "\\n",
                      "APIKEY2_VALUE",
                      "=",
                      {
                        "Ref": "apiKey2"
                      },
                      "\\n",
                      "AUTH_TOKEN_NODARY",
                      "=",
                      {
                        "Ref": "NodarySignedApiToken"
                      },
                      "\\n",
                      "AUTH_TOKEN_API3",
                      "=",
                      {
                        "Ref": "Api3SignedApiToken"
                      },
                      "\\n",
                      "AUTH_TOKEN_STAGING",
                      "=",
                      {
                        "Ref": "StagingSignedApiToken"
                      },
                      "\\n",
                      "STAGE",
                      "=",
                      "aws"
                    ]
                  ]
                }
              },
              {
                "Name": "LOG_LEVEL",
                "Value": "info"
              }
            ],
            "EntryPoint": ["/bin/sh", "-c"],
            "Command": ["echo '<RUNNER_SCRIPT_BASE64>' | base64 -d > run.sh; sh run.sh"],
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "grafana-loki",
                "Url": {
                  "Fn::Join": [
                    "",
                    [
                      "https://",
                      {
                        "Ref": "grafanaLokiUser"
                      },
                      ":",
                      {
                        "Ref": "grafanaLokiToken"
                      },
                      "@",
                      {
                        "Ref": "grafanaLokiEndpoint"
                      },
                      "/loki/api/v1/push"
                    ]
                  ]
                },
                "Labels": "{app=\"airnode-feed\",airnode=\"<AIRNODE_ADDRESS>\"}",
                "RemoveKeys": "container_id,container_name,ecs_task_definition,source,ecs_cluster",
                "LabelKeys": "ecs_task_arn",
                "LineFormat": "json"
              }
            }
          }
        ]
      }
    },
    "AppCluster": {
      "Type": "AWS::ECS::Cluster",
      "Properties": {
        "ClusterName": "AirnodeFeedCluster-<SOME_ID>"
      }
    },
    "AppService": {
      "Type": "AWS::ECS::Service",
      "Properties": {
        "Cluster": {
          "Ref": "AppCluster"
        },
        "ServiceName": "AirnodeFeedService-<SOME_ID>",
        "DesiredCount": 1,
        "LaunchType": "FARGATE",
        "TaskDefinition": {
          "Ref": "AppDefinition"
        },
        "NetworkConfiguration": {
          "AwsvpcConfiguration": {
            "AssignPublicIp": "ENABLED",
            "Subnets": [
              {
                "Ref": "InstanceSubnet"
              }
            ]
          }
        },
        "DeploymentConfiguration": {
          "MinimumHealthyPercent": 100,
          "MaximumPercent": 200
        }
      }
    },
    "InstanceVPC": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": "10.0.0.0/16",
        "EnableDnsSupport": true,
        "EnableDnsHostnames": true
      }
    },
    "InstanceInternetGateway": {
      "Type": "AWS::EC2::InternetGateway"
    },
    "InstanceVPCGatewayAttachment": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": {
          "Ref": "InstanceVPC"
        },
        "InternetGatewayId": {
          "Ref": "InstanceInternetGateway"
        }
      }
    },
    "InstancePublicRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "InstanceVPC"
        }
      }
    },
    "InstancePublicRoute": {
      "Type": "AWS::EC2::Route",
      "DependsOn": "InstanceVPCGatewayAttachment",
      "Properties": {
        "RouteTableId": {
          "Ref": "InstancePublicRouteTable"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "InstanceInternetGateway"
        }
      }
    },
    "InstanceSubnet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": "10.0.0.0/24",
        "VpcId": {
          "Ref": "InstanceVPC"
        },
        "MapPublicIpOnLaunch": true
      }
    },
    "InstancePublicSubnet1RouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "InstancePublicRouteTable"
        },
        "SubnetId": {
          "Ref": "InstanceSubnet"
        }
      }
    },
    "ECSTaskRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": {
            "Effect": "Allow",
            "Principal": {
              "Service": ["ecs-tasks.amazonaws.com"]
            },
            "Action": ["sts:AssumeRole"]
          }
        },
        "Policies": [
          {
            "PolicyName": "ECSTaskExecutionRolePolicy",
            "PolicyDocument": {
              "Statement": {
                "Effect": "Allow",
                "Action": [
                  "logs:CreateLogGroup",
                  "logs:CreateLogStream",
                  "logs:DescribeLogStreams",
                  "logs:PutLogEvents"
                ],
                "Resource": "*"
              }
            }
          }
        ]
      }
    }
  }
}
